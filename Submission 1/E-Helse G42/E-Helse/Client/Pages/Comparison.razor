@page "/comparison"
@inject IJSRuntime JSRuntime
@using EasyCompressor
@using C = E_Helse.Shared.ArithmeticCompression.Compressor;


<PageTitle>Comparison of compression</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Comparison of compression algorithms</MudText>

<MudText Style="margin: 30px;">
    Currently this supports compression of all file types and data.
</MudText>

<div style="width: 200px;">
    <MudFileUpload T="IBrowserFile" Context="fileInput" FilesChanged="UploadFiles">
        <ButtonTemplate>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload"
                       for="@fileInput">
                Upload Files
            </MudButton>
        </ButtonTemplate>
    </MudFileUpload>
</div>

@if (files != null)
{
    <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
    <MudList>
        @foreach (var file in files)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                @file.Name  &emsp; @file.Size bytes
            </MudListItem>
        }
    </MudList>
}


<MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="margin-top: 30px" OnClick="HuffmanEncode">Encode</MudButton>

<MudText Class="@invisible" Style="margin-top: 20px;">File size after Huffman encoding: &emsp; @encodedFileSizeH bytes. This is a reduction of @savingsH %</MudText>
<MudText Class="@invisible" Style="margin-top: 20px;">File size after Arithmetic encoding: &emsp; @encodedFileSizeA bytes. This is a reduction of @savingsA %</MudText>
<MudText Class="@invisible" Style="margin-top: 20px;">File size after RLE encoding: &emsp; @encodedFileSizeR bytes. This is a reduction of @savingsR %</MudText>
<MudText Class="@invisible" Style="margin-top: 20px;">File size after Dictionary encoding: &emsp; @encodedFileSizeD bytes. This is a reduction of @savingsD %</MudText>


@code {
    string encodedFileSizeH = "0";
    string encodedFileSizeA = "0";
    string encodedFileSizeR = "0";
    string encodedFileSizeD = "0";
    Byte[] content;
    long savingsH;
    long savingsA;
    long savingsR;
    long savingsD;
    string invisible = "invisible";
    int maxFilesize = 1000;

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async void UploadFiles(IBrowserFile file)
    {
        if (file.Size > maxFilesize * 1024)
        {
            await JSRuntime.InvokeAsync<bool>("confirm", $"Please choose a file smaller than {maxFilesize}kB");
            return;
        }
        invisible = "invisible";
        files.Clear();
        files.Add(file);
    }
    async Task ReadFiles()
    {
        if (files != null)
        {
            foreach (var file in files)
            {

                // get the file size
                var buffer = new byte[file.Size];
                // read the text file
                await file.OpenReadStream(maxAllowedSize: 1024 * 1000).ReadAsync(buffer);
                // convert byte array to string
                content = buffer;

            }
        }
    }

    private async Task HuffmanEncode()
    {
        await ReadFiles();

        HuffmanData mainData = new HuffmanData();
        mainData.uncompressedData = content;
        HuffEncoder encoder = new HuffEncoder();
        encoder.Compress(mainData);
        encodedFileSizeH = mainData.compressedData.Length.ToString();
        savingsH = 100 - (mainData.compressedData.Length) * 100 / files.First().Size;

        var compressedBytes = C.CompressBytes(content);
        encodedFileSizeA = compressedBytes.Count.ToString();
        savingsA = 100 - (compressedBytes.Count) * 100 / files.First().Size;

        var rle = E_Helse.Shared.RunLengthEncoding.RLEEncoder<byte>.Encode(content).ToArray();
        encodedFileSizeR = rle.Length.ToString();
        savingsR = 100 - (rle.Length) * 100 / files.First().Size;

        var encodedDataD = Compressor.CompressBytes(content).ToArray();
        encodedFileSizeD = encodedDataD.Length.ToString();
        savingsD = 100 - (encodedDataD.Length) * 100 / files.First().Size;
        invisible = "visible";
    }
}
